import os
import sys
import requests
from flask import Flask, render_template, jsonify, redirect, url_for, request, abort
import mysql.connector
from mysql.connector import Error
from config import Config
from managedb import initialize_database, reconfigure_database

app = Flask(__name__)
app.config.from_object(Config)

# Initialize the database with the app's config
with app.app_context():
    initialize_database(app)

@app.route('/reload-config', methods=['POST'])
def reload_config():
    # Implement security checks here to ensure only authorized requests can trigger a reload
    Config.reload()  # Reload the configurations
    app.config.from_object(Config)  # Apply the updated configurations
    reconfigure_database(app)  # Additional step if needed to reconfigure the DB
    return jsonify({'message': 'Configurations reloaded successfully'}), 200

def get_db_connection():
    """Establishes a connection to the database and returns the connection object."""
    try:
        connection = mysql.connector.connect(
            host=app.config['DATABASE_HOST'],
            user=app.config['DATABASE_USER'],
            password=app.config['DATABASE_PASSWORD'],
            database=app.config['DATABASE_NAME'],
        )
        return connection
    except Error as e:
        print(f"Error connecting to the database: {e}")
        sys.exit(1)

@app.route('/')
def index():
    """Renders the main page with quotes from the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT quote, author FROM quotes")
    quotes = cursor.fetchall()
    cursor.close()
    conn.close()
    return render_template('index.html', quotes=quotes)

@app.route('/quotes')
def redirect_to_api_quotes():
    return redirect(url_for('quotes_api'))

@app.route('/api/quotes', endpoint='quotes_api')
def quotes_api():
    """Fetches a random quote from an external API and stores it in the database if it's not already present."""
    try:
        response = requests.get('https://api.quotable.io/random')
        data = response.json()
        quote, author = data['content'], data['author']

        conn = get_db_connection()
        cursor = conn.cursor()
        # Check if the quote already exists
        cursor.execute("SELECT COUNT(*) FROM quotes WHERE quote = %s", (quote,))
        if cursor.fetchone()[0] == 0:
            # Insert the new quote
            cursor.execute("INSERT INTO quotes (quote, author) VALUES (%s, %s)", (quote, author))
            conn.commit()
        cursor.close()
        conn.close()
        return jsonify({'quote': quote, 'author': author})
    except requests.RequestException as e:
        return jsonify({'error': str(e)}), 500
    except Error as err:
        return jsonify({'error': f'Database error: {err}'}), 500

@app.route('/api/quotes/duplicates')
def show_duplicates():
    """Shows duplicate quotes in the database."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT quote, COUNT(quote) AS cnt
        FROM quotes
        GROUP BY quote
        HAVING cnt > 1
    """)
    duplicates = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify([{'quote': quote, 'count': count} for quote, count in duplicates])

@app.route('/api/quotes/duplicates/delete', methods=['POST'])
def delete_duplicates():
    """Deletes duplicate quotes from the database, keeping only the first occurrence."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        DELETE q1 FROM quotes q1
        INNER JOIN quotes q2 
        WHERE q1.id > q2.id AND q1.quote = q2.quote
    """)
    affected_rows = cursor.rowcount
    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({'message': f'Deleted {affected_rows} duplicate quotes'})

if __name__ == "__main__":
    app.run(debug=True, port=3000)
